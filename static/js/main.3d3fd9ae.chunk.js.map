{"version":3,"sources":["componants/buttonData.js","componants/Calculator.js","componants/Footer.js","componants/Shape.js","App.js","index.js"],"names":["buttonData","id","value","Calculator","bgColor","inputScreen","useRef","outputScreen","useState","isReadyForReset","setIsReadyForReset","display","setDisplay","firstDigit","setFirstDigit","lastDigit","setLastDigit","func","setFunc","evalFunc","expression","math","toLocaleString","minimumFractionDigits","maximumFractionDigits","clearFunc","handleClick","e","button","target","isNumeric","isNaN","fz","length","lz","indexOf","join","result","split","equalsFunc","useEffect","output","current","input","innerText","ref","className","map","btn","key","onClick","Footer","href","Shape","color","style","backgroundColor","App","setColor","randomNum","Math","floor","random","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.3d3fd9ae.chunk.js","sourcesContent":["export const buttonData = [\r\n  {\r\n    id: \"clear\",\r\n    value: \"ac\"\r\n  },\r\n  {\r\n    id: \"divide\",\r\n    value: \"/\"\r\n  },\r\n  {\r\n    id: \"multiply\",\r\n    value: \"*\"\r\n  },\r\n  {\r\n    id: \"subtract\",\r\n    value: \"-\"\r\n  },\r\n  {\r\n    id: \"add\",\r\n    value: \"+\"\r\n  },\r\n  {\r\n    id: \"seven\",\r\n    value: \"7\"\r\n  },\r\n  {\r\n    id: \"eight\",\r\n    value: \"8\"\r\n  },\r\n  {\r\n    id: \"nine\",\r\n    value: \"9\"\r\n  },\r\n  {\r\n    id: \"four\",\r\n    value: \"4\"\r\n  },\r\n  {\r\n    id: \"five\",\r\n    value: \"5\"\r\n  },\r\n  {\r\n    id: \"six\",\r\n    value: \"6\"\r\n  },\r\n  {\r\n    id: \"one\",\r\n    value: \"1\"\r\n  },\r\n  {\r\n    id: \"two\",\r\n    value: \"2\"\r\n  },\r\n  {\r\n    id: \"three\",\r\n    value: \"3\"\r\n  },\r\n  {\r\n    id: \"zero\",\r\n    value: \"0\"\r\n  },\r\n  {\r\n    id: \"decimal\",\r\n    value: \".\"\r\n  },\r\n  {\r\n    id: \"equals\",\r\n    value: \"=\"\r\n  }\r\n];\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { buttonData } from \"./buttonData\";\r\nimport * as math from \"mathjs\";\r\n\r\nexport default function Calculator({ bgColor }) {\r\n  const inputScreen = useRef(null);\r\n  const outputScreen = useRef(null);\r\n  const [isReadyForReset, setIsReadyForReset] = useState(false);\r\n\r\n  const [display, setDisplay] = useState(\"\");\r\n  const [firstDigit, setFirstDigit] = useState([]);\r\n  const [lastDigit, setLastDigit] = useState([]);\r\n  const [func, setFunc] = useState(\"\");\r\n\r\n  const evalFunc = (expression) => {\r\n    return math.round(math.evaluate(expression), 4).toLocaleString(\"en-EN\", {\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 4,\r\n    });\r\n  };\r\n\r\n  const equalsFunc = () => {\r\n    let expression = firstDigit.join(\"\") + func + lastDigit.join(\"\");\r\n    if (\r\n      !lastDigit.length ||\r\n      (lastDigit.length === 1 && lastDigit.indexOf(\"-\") === 0)\r\n    ) {\r\n      expression = firstDigit.join(\"\");\r\n    }\r\n    setDisplay(expression);\r\n    const result = evalFunc(expression);\r\n    setFirstDigit(result.split(\"\"));\r\n  };\r\n\r\n  const clearFunc = () => {\r\n    setFirstDigit([]);\r\n    setLastDigit([]);\r\n    setFunc(\"\");\r\n    setDisplay(\"\");\r\n    setIsReadyForReset(false);\r\n    bgColor();\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    const button = e.target;\r\n    const isNumeric = !isNaN(button.value);\r\n\r\n    //const regex=/^(?!.*(.)\\1)[0-9\\-]+$/;\r\n\r\n    // add decimal sign and avoid more than one\r\n    if (!isNumeric && button.value === \".\") {\r\n      let fz = firstDigit.length === 0 ? \"0\" : \"\";\r\n      let lz = lastDigit.length === 0 ? \"0\" : \"\";\r\n      if (!func && firstDigit.indexOf(button.value) === -1) {\r\n        setFirstDigit([...firstDigit, fz, button.value]);\r\n      } else if (func && lastDigit.indexOf(button.value) === -1) {\r\n        setLastDigit([...lastDigit, lz, button.value]);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // add negative number\r\n    if (!isNumeric && button.value === \"-\") {\r\n      if (!func && firstDigit.length === 0) {\r\n        setFirstDigit([button.value]);\r\n      } else if (func && lastDigit.length === 0) {\r\n        setLastDigit([button.value]);\r\n      }\r\n    }\r\n\r\n    // clear button\r\n    if (button.value === \"ac\") {\r\n      clearFunc();\r\n      return false;\r\n    }\r\n\r\n    // equals button\r\n    if (button.value === \"=\") {\r\n      firstDigit.length && equalsFunc();\r\n      setIsReadyForReset(true);\r\n      return false;\r\n    }\r\n\r\n    // remove minus sign on lastDigit when followed with an operator\r\n    if (!isNumeric && lastDigit.length === 1 && lastDigit.indexOf(\"-\") === 0) {\r\n      setLastDigit([]);\r\n      setFunc(button.value);\r\n      return false;\r\n    }\r\n\r\n    // add an operator and avoid take the minus sign from firstDigit and lastDigit as un operator\r\n    if (!isNumeric && firstDigit.length) {\r\n      if (func && button.value === \"-\" && !lastDigit.length) return false;\r\n      if (firstDigit.length === 1 && firstDigit.indexOf(\"-\") === 0) {\r\n        return false;\r\n      }\r\n      setFunc(button.value);\r\n      setIsReadyForReset(false);\r\n    }\r\n\r\n    // add firstDigit and avoid it to start with zero\r\n    if (isNumeric && !func) {\r\n      if (button.value === \"0\" && firstDigit.length === 0) return false;\r\n      setFirstDigit([...firstDigit, button.value]);\r\n    }\r\n\r\n    // add lastDigit and avoid it to start with zero\r\n    if (isNumeric && func) {\r\n      if (button.value === \"0\" && lastDigit.length === 0) return false;\r\n      setLastDigit([...lastDigit, button.value]);\r\n    }\r\n\r\n    // pressing an operator after equals, start a new calculation with the result\r\n    if (!isNumeric && display) {\r\n      setDisplay(\"\");\r\n      setLastDigit([]);\r\n      setFunc(button.value);\r\n    }\r\n\r\n    // add, subtract, multiply and divide a chain of numbers of any length\r\n    // or start a new calculation if pressing a number after equals\r\n    if (!isNumeric && firstDigit.length && lastDigit.length) {\r\n      !isReadyForReset && setFirstDigit([...firstDigit, func, ...lastDigit]);\r\n      setDisplay(\"\");\r\n      setLastDigit([]);\r\n      setFunc(button.value);\r\n      return false;\r\n    } else if (\r\n      isNumeric &&\r\n      firstDigit.length &&\r\n      lastDigit.length &&\r\n      isReadyForReset\r\n    ) {\r\n      clearFunc();\r\n      setFirstDigit([button.value]);\r\n      setIsReadyForReset(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const output = outputScreen.current;\r\n    const input = inputScreen.current;\r\n    output.innerText = firstDigit.length ? firstDigit.join(\"\") : 0;\r\n    if (func) {\r\n      input.innerText = firstDigit.join(\"\") + \"\" + func;\r\n      if (lastDigit) {\r\n        output.innerText = lastDigit.length\r\n          ? lastDigit.join(\"\")\r\n          : evalFunc(firstDigit.join(\"\"));\r\n      }\r\n    } else {\r\n      input.innerText = \"\";\r\n    }\r\n    if (display) {\r\n      input.innerText = display;\r\n      output.innerText = firstDigit.join(\"\");\r\n    }\r\n  }, [firstDigit, lastDigit, func, display]);\r\n\r\n  const handleClicke = (e) => {\r\n    const input = inputScreen.current;\r\n    const output = outputScreen.current;\r\n    const button = e.target;\r\n\r\n    if (output.innerText.slice(0, 1) === \"0\" && output.innerText.length === 1) {\r\n      output.innerText = output.innerText.replace(\"0\", \"\");\r\n    }\r\n\r\n    output.innerText = output.innerText + \"\" + button.value;\r\n\r\n    if (isNaN(button.value)) {\r\n      if (\r\n        isNaN(output.innerText.slice(0, 1)) &&\r\n        output.innerText.slice(0, 1) !== \"-\"\r\n      ) {\r\n        output.innerText = \"0\";\r\n      }\r\n\r\n      if (\r\n        isNaN(output.innerText.slice(-2, -1)) &&\r\n        output.innerText.slice(-1) !== \"-\"\r\n      ) {\r\n        if (isNaN(output.innerText.slice(-2, -1))) {\r\n          output.innerText = output.innerText.replace(\r\n            output.innerText.slice(-2, -1),\r\n            \"\"\r\n          );\r\n        }\r\n        if (\r\n          isNaN(output.innerText.slice(-1)) &&\r\n          output.innerText.slice(-1) !== \"-\"\r\n        ) {\r\n          if (isNaN(output.innerText.slice(-2, -1))) {\r\n            output.innerText = output.innerText.replace(\r\n              output.innerText.slice(-2, -1),\r\n              \"\"\r\n            );\r\n            console.log(\"si biir if\");\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    //console.log(\"last\",output.innerText.slice(-1));\r\n\r\n    if (button.id === \"equals\") {\r\n      const result = output.innerText.replace(\"=\", \"\").replaceAll(\",\", \"\");\r\n      input.innerText = result;\r\n      output.innerText = math\r\n        .round(math.evaluate(result), 4)\r\n        .toLocaleString(\"en-EN\", {\r\n          minimumFractionDigits: 0,\r\n          maximumFractionDigits: 4,\r\n        });\r\n      setIsReadyForReset(true);\r\n    }\r\n\r\n    if (button.id === \"clear\") {\r\n      input.innerText = \"\";\r\n      output.innerText = 0;\r\n    }\r\n\r\n    if (!isNaN(button.value) && isReadyForReset) {\r\n      input.innerText = \"\";\r\n      output.innerText = button.value;\r\n    } else if (button.id !== \"equals\") {\r\n      setIsReadyForReset(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"calculator\">\r\n      <div id=\"screen\">\r\n        <span ref={inputScreen}></span>\r\n        <span id=\"display\" ref={outputScreen}>\r\n          0\r\n        </span>\r\n      </div>\r\n      <div className=\"block-btn\">\r\n        {buttonData.map((btn, key) => (\r\n          <button\r\n            key={key}\r\n            id={btn.id}\r\n            value={btn.value}\r\n            onClick={(e) => handleClick(e)}\r\n          >\r\n            {btn.value}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <div className=\"line\" />\r\n    </div>\r\n  );\r\n}\r\n","export default function Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      Designed and coded by{\" \"}\r\n      <a href=\"https://linkedin.com/in/cheikhouwgueye\">cheikhouw</a>\r\n    </div>\r\n  );\r\n}\r\n","export default function Shape({ color }) {\r\n  return <div className=\"shape\" style={{ backgroundColor: color }} />;\r\n}\r\n","import { useEffect, useState } from \"react\";\nimport Calculator from \"./componants/Calculator\";\nimport Footer from \"./componants/Footer\";\nimport Shape from \"./componants/Shape\";\n\nexport default function App() {\n  const [color, setColor] = useState(\"\");\n\n  const bgColor = () => {\n    const colors = [\"#f48c8c\", \"#8f8cf4\", \"#f48cce\", \"#556\"];\n    let randomNum = Math.floor(Math.random() * 4);\n    setColor(colors[randomNum]);\n  };\n\n  useEffect(() => {\n    bgColor();\n  }, []);\n\n  return (\n    <>\n      <Shape color={color} />\n      <div className=\"app\">\n        <Calculator bgColor={bgColor} />\n        <Footer />\n      </div>\n    </>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"./styles.css\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}